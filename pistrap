#!/usr/bin/env bash

#   A bash script to create a bootable Raspbian/Debian ROOTFS for Raspberry Pi
#   Uses chroot,qemu-user-static as main dependencies so far
#   Author: Aditya Visvanathan

#   Some variables that will be used.

OS="$(uname)"
DATE=`date +%Y%m%d`
DEFMIR="http://archive.raspbian.org/raspbian"


#   Declare functions here..

#   Display usage here for -h parameter and no parameters as well
usage() {
    if  [ "$1" = "-h" ] || [ $# -eq 0 ] ; then
        printf "\tUSAGE: pistrap -i /path/to/config/template\n"
        exit 1
    fi
}


#   Check if script is not being run with root privileges
checkuid() {
    if [  "$UID" -eq 0 ]; then
        echo "You're running with root privileges.Please Don't!"
        echo "The script will let you know if and when elevated privleges are required"
        exit 1
    fi
}


#   Variable to tor template location
FILELOC=$2
CHECKFLAG=1
IMAGEFLAG=1
CHROOT="./bootstrap"            #   Default chroot bootstrap location(obsolete)
checkuid                        #   Call checkuid function
usage "$@"                      #   A call for help
if [ ! -e "$FILELOC"/template ]; then    #This is more for my testing,will change this shit
    printf "\tNo template found.\n"
    exit 1 
fi

source "$FILELOC"/template               #Grab variable from template
echo "Template found,sourcing variables:"

if [ ! -d "$rootfs" ]; then
    mkdir -p "$rootfs"
fi

if [ "$imgdir" = "" ] || [ ! -e "$imgdir" ]; then
    echo "Warning:No Raspbian/Debian image found as specified in template"
    exit 1 
fi


#   Check for architecture
if [ "$arch" = "" ]; then
    echo "Warning:No architecture specified in template"
    
else
    printf "\nArchitecture:$arch\n"

fi


#   Check for package list
if [ "${#packagelist[@]}" -eq 0 ]; then
    echo "Empty package list!"
    echo "Aborting"
    exit 1
fi


#   Check release
if [ "$release" = "" ]; then
    echo "Warning:Release codename not specified in template"
    
else
    echo "Release codename:$release"
fi

#   Check for build environment and create if not found        

#   Expand image by space
OFFSET2=8192
OFFSET1=94208
#sudo dd if=/dev/zero bs=1M count=1024 >> "$imgdir"

#   Check if device is mounted before mounting
if [ ! ls "$rootfs" ]; then
    echo "Image not mounted"
    echo "Mounting"
#   Set up image as loop device
    sudo mount -o loop,offset=48234496 "$imgdir" "$rootfs"
    sudo mount -o bind /dev "$rootfs"/dev
    sudo mount -o bind /proc "$rootfs"/proc
    sudo mount -o bind /sys "$rootfs"/sys
fi

#   copy qemu binary
sudo cp /usr/bin/qemu-arm-static "$rootfs"/usr/bin/

#   chroot to raspbian
sudo cp "$FILELOC"/install.sh "$rootfs"/
sudo chroot "$rootfs" /bin/bash install.sh 

#   revert ld.so.preload fix


#   unmount everything
#    unmount loop device










